# The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:
# 
# 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
# 
# Let us list the factors of the first seven triangle numbers:
# 
#  1: 1
#  3: 1,3
#  6: 1,2,3,6
# 10: 1,2,5,10
# 15: 1,3,5,15
# 21: 1,3,7,21
# 28: 1,2,4,7,14,28
# We can see that 28 is the first triangle number to have over five divisors.
# 
# What is the value of the first triangle number to have over five hundred divisors?

require "../helpers/prime_checker.rb"

current_triangle_number = 1
triangle_index = 1

divisors = current_triangle_number.divisors

while divisors.length < 500
  triangle_index += 1
  current_triangle_number = (triangle_index * (triangle_index + 1))/2
  
  # n and n+1 (/2 - because the result divides by 2) will never share the same divisors (except for 1)
  number_of_divisors1 = 0
  number_of_divisors2 = 0
  
  if triangle_index % 2 == 0
    number_of_divisors1 = (triangle_index/2).number_of_divisors
    number_of_divisors1 = (triangle_index + 1).number_of_divisors
  else
    number_of_divisors1 = ((triangle_index + 1)/2).number_of_divisors
    number_of_divisors1 = triangle_index.number_of_divisors
  end
  
  if (number_of_divisors1 + number_of_divisors1 >= 500)    
    puts "\t\t === trying for #{current_triangle_number} ==="
    divisors = current_triangle_number.divisors
  elsif (triangle_index % 1000 == 0)
    puts "==> #{triangle_index}: #{current_triangle_number}"
  end
end

puts "Found it: #{current_triangle_number} => #{divisors}"